// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourcemanagerPolicyBindingMember PolicyBindingMember represents an identity associated with a policy binding.
//
// swagger:model resourcemanagerPolicyBindingMember
type ResourcemanagerPolicyBindingMember struct {

	// MemberId is the unique identifier for the member.
	MemberID string `json:"memberId,omitempty"`

	// MemberType is the type of the member.
	MemberType *ResourcemanagerPolicyBindingMemberType `json:"memberType,omitempty"`
}

// Validate validates this resourcemanager policy binding member
func (m *ResourcemanagerPolicyBindingMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMemberType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcemanagerPolicyBindingMember) validateMemberType(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberType) { // not required
		return nil
	}

	if m.MemberType != nil {
		if err := m.MemberType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memberType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memberType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resourcemanager policy binding member based on the context it is used
func (m *ResourcemanagerPolicyBindingMember) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMemberType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcemanagerPolicyBindingMember) contextValidateMemberType(ctx context.Context, formats strfmt.Registry) error {

	if m.MemberType != nil {
		if err := m.MemberType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memberType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memberType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourcemanagerPolicyBindingMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcemanagerPolicyBindingMember) UnmarshalBinary(b []byte) error {
	var res ResourcemanagerPolicyBindingMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
