// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrganizationOrganizationState OrganizationState is the states the organization can be in.
//
// swagger:model OrganizationOrganizationState
type OrganizationOrganizationState string

func NewOrganizationOrganizationState(value OrganizationOrganizationState) *OrganizationOrganizationState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrganizationOrganizationState.
func (m OrganizationOrganizationState) Pointer() *OrganizationOrganizationState {
	return &m
}

const (

	// OrganizationOrganizationStateUNKNOWN captures enum value "UNKNOWN"
	OrganizationOrganizationStateUNKNOWN OrganizationOrganizationState = "UNKNOWN"

	// OrganizationOrganizationStateACTIVE captures enum value "ACTIVE"
	OrganizationOrganizationStateACTIVE OrganizationOrganizationState = "ACTIVE"

	// OrganizationOrganizationStatePENDINGDELETE captures enum value "PENDING_DELETE"
	OrganizationOrganizationStatePENDINGDELETE OrganizationOrganizationState = "PENDING_DELETE"
)

// for schema
var organizationOrganizationStateEnum []interface{}

func init() {
	var res []OrganizationOrganizationState
	if err := json.Unmarshal([]byte(`["UNKNOWN","ACTIVE","PENDING_DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationOrganizationStateEnum = append(organizationOrganizationStateEnum, v)
	}
}

func (m OrganizationOrganizationState) validateOrganizationOrganizationStateEnum(path, location string, value OrganizationOrganizationState) error {
	if err := validate.EnumCase(path, location, value, organizationOrganizationStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this organization organization state
func (m OrganizationOrganizationState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrganizationOrganizationStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this organization organization state based on context it is used
func (m OrganizationOrganizationState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
