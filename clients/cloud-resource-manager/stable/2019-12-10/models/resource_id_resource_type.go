// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResourceIDResourceType resource ID resource type
//
// swagger:model ResourceIDResourceType
type ResourceIDResourceType string

func NewResourceIDResourceType(value ResourceIDResourceType) *ResourceIDResourceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResourceIDResourceType.
func (m ResourceIDResourceType) Pointer() *ResourceIDResourceType {
	return &m
}

const (

	// ResourceIDResourceTypeUNKNOWN captures enum value "UNKNOWN"
	ResourceIDResourceTypeUNKNOWN ResourceIDResourceType = "UNKNOWN"

	// ResourceIDResourceTypeORGANIZATION captures enum value "ORGANIZATION"
	ResourceIDResourceTypeORGANIZATION ResourceIDResourceType = "ORGANIZATION"

	// ResourceIDResourceTypePROJECT captures enum value "PROJECT"
	ResourceIDResourceTypePROJECT ResourceIDResourceType = "PROJECT"
)

// for schema
var resourceIdResourceTypeEnum []interface{}

func init() {
	var res []ResourceIDResourceType
	if err := json.Unmarshal([]byte(`["UNKNOWN","ORGANIZATION","PROJECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceIdResourceTypeEnum = append(resourceIdResourceTypeEnum, v)
	}
}

func (m ResourceIDResourceType) validateResourceIDResourceTypeEnum(path, location string, value ResourceIDResourceType) error {
	if err := validate.EnumCase(path, location, value, resourceIdResourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resource ID resource type
func (m ResourceIDResourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResourceIDResourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resource ID resource type based on context it is used
func (m ResourceIDResourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
