// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProjectProjectState ProjectState is the states the project can be in.
//
// swagger:model ProjectProjectState
type ProjectProjectState string

func NewProjectProjectState(value ProjectProjectState) *ProjectProjectState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ProjectProjectState.
func (m ProjectProjectState) Pointer() *ProjectProjectState {
	return &m
}

const (

	// ProjectProjectStateUNKNOWN captures enum value "UNKNOWN"
	ProjectProjectStateUNKNOWN ProjectProjectState = "UNKNOWN"

	// ProjectProjectStateACTIVE captures enum value "ACTIVE"
	ProjectProjectStateACTIVE ProjectProjectState = "ACTIVE"

	// ProjectProjectStateDELETING captures enum value "DELETING"
	ProjectProjectStateDELETING ProjectProjectState = "DELETING"

	// ProjectProjectStateDELETED captures enum value "DELETED"
	ProjectProjectStateDELETED ProjectProjectState = "DELETED"
)

// for schema
var projectProjectStateEnum []interface{}

func init() {
	var res []ProjectProjectState
	if err := json.Unmarshal([]byte(`["UNKNOWN","ACTIVE","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectProjectStateEnum = append(projectProjectStateEnum, v)
	}
}

func (m ProjectProjectState) validateProjectProjectStateEnum(path, location string, value ProjectProjectState) error {
	if err := validate.EnumCase(path, location, value, projectProjectStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this project project state
func (m ProjectProjectState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProjectProjectStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this project project state based on context it is used
func (m ProjectProjectState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
