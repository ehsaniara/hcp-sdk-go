// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudWaypointWaypointServiceEndingActionBody hashicorp cloud waypoint waypoint service ending action body
//
// swagger:model hashicorp.cloud.waypoint.WaypointService.EndingActionBody
type HashicorpCloudWaypointWaypointServiceEndingActionBody struct {

	// The action run id returned by StartingAction
	ActionRunID string `json:"action_run_id,omitempty"`

	// A status log message to add to the run as it's finished. If empty, no status
	// log entry is created.
	FinalStatus string `json:"final_status,omitempty"`

	// Global references the entire server. This is used in some APIs
	// as a way to read/write values that are server-global.
	Namespace interface{} `json:"namespace,omitempty"`

	// The status code for the operation. Follows general unix and http status code
	// semantics.
	StatusCode int32 `json:"status_code,omitempty"`
}

// Validate validates this hashicorp cloud waypoint waypoint service ending action body
func (m *HashicorpCloudWaypointWaypointServiceEndingActionBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hashicorp cloud waypoint waypoint service ending action body based on context it is used
func (m *HashicorpCloudWaypointWaypointServiceEndingActionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudWaypointWaypointServiceEndingActionBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudWaypointWaypointServiceEndingActionBody) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudWaypointWaypointServiceEndingActionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
