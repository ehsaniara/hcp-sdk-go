// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudWaypointWaypointServiceRunActionBody hashicorp cloud waypoint waypoint service run action body
//
// swagger:model hashicorp.cloud.waypoint.WaypointService.RunActionBody
type HashicorpCloudWaypointWaypointServiceRunActionBody struct {

	// The action config to run
	ActionRef *HashicorpCloudWaypointActionCfgRef `json:"action_ref,omitempty"`

	// The namespace the action will run in
	Namespace interface{} `json:"namespace,omitempty"`

	// Optional scope to set for running the action
	Scope *HashicorpCloudWaypointActionRunScope `json:"scope,omitempty"`

	// Optional variables to override in the action run
	VariableOverrides []*HashicorpCloudWaypointRunActionRequestVariableOverride `json:"variable_overrides"`
}

// Validate validates this hashicorp cloud waypoint waypoint service run action body
func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableOverrides(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) validateActionRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionRef) { // not required
		return nil
	}

	if m.ActionRef != nil {
		if err := m.ActionRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action_ref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action_ref")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) validateVariableOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.VariableOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableOverrides); i++ {
		if swag.IsZero(m.VariableOverrides[i]) { // not required
			continue
		}

		if m.VariableOverrides[i] != nil {
			if err := m.VariableOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variable_overrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variable_overrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this hashicorp cloud waypoint waypoint service run action body based on the context it is used
func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariableOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) contextValidateActionRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ActionRef != nil {

		if swag.IsZero(m.ActionRef) { // not required
			return nil
		}

		if err := m.ActionRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action_ref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action_ref")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {

		if swag.IsZero(m.Scope) { // not required
			return nil
		}

		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) contextValidateVariableOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VariableOverrides); i++ {

		if m.VariableOverrides[i] != nil {

			if swag.IsZero(m.VariableOverrides[i]) { // not required
				return nil
			}

			if err := m.VariableOverrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variable_overrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variable_overrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudWaypointWaypointServiceRunActionBody) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudWaypointWaypointServiceRunActionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
