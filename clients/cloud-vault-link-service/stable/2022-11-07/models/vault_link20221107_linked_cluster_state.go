// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VaultLink20221107LinkedClusterState vault link 20221107 linked cluster state
//
// swagger:model vault_link_20221107LinkedClusterState
type VaultLink20221107LinkedClusterState string

func NewVaultLink20221107LinkedClusterState(value VaultLink20221107LinkedClusterState) *VaultLink20221107LinkedClusterState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VaultLink20221107LinkedClusterState.
func (m VaultLink20221107LinkedClusterState) Pointer() *VaultLink20221107LinkedClusterState {
	return &m
}

const (

	// VaultLink20221107LinkedClusterStateLINKEDCLUSTERSTATEINVALID captures enum value "LINKED_CLUSTER_STATE_INVALID"
	VaultLink20221107LinkedClusterStateLINKEDCLUSTERSTATEINVALID VaultLink20221107LinkedClusterState = "LINKED_CLUSTER_STATE_INVALID"

	// VaultLink20221107LinkedClusterStateLINKING captures enum value "LINKING"
	VaultLink20221107LinkedClusterStateLINKING VaultLink20221107LinkedClusterState = "LINKING"

	// VaultLink20221107LinkedClusterStateLINKED captures enum value "LINKED"
	VaultLink20221107LinkedClusterStateLINKED VaultLink20221107LinkedClusterState = "LINKED"

	// VaultLink20221107LinkedClusterStateSEALED captures enum value "SEALED"
	VaultLink20221107LinkedClusterStateSEALED VaultLink20221107LinkedClusterState = "SEALED"

	// VaultLink20221107LinkedClusterStateUNLINKING captures enum value "UNLINKING"
	VaultLink20221107LinkedClusterStateUNLINKING VaultLink20221107LinkedClusterState = "UNLINKING"

	// VaultLink20221107LinkedClusterStateUNLINKED captures enum value "UNLINKED"
	VaultLink20221107LinkedClusterStateUNLINKED VaultLink20221107LinkedClusterState = "UNLINKED"
)

// for schema
var vaultLink20221107LinkedClusterStateEnum []interface{}

func init() {
	var res []VaultLink20221107LinkedClusterState
	if err := json.Unmarshal([]byte(`["LINKED_CLUSTER_STATE_INVALID","LINKING","LINKED","SEALED","UNLINKING","UNLINKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vaultLink20221107LinkedClusterStateEnum = append(vaultLink20221107LinkedClusterStateEnum, v)
	}
}

func (m VaultLink20221107LinkedClusterState) validateVaultLink20221107LinkedClusterStateEnum(path, location string, value VaultLink20221107LinkedClusterState) error {
	if err := validate.EnumCase(path, location, value, vaultLink20221107LinkedClusterStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vault link 20221107 linked cluster state
func (m VaultLink20221107LinkedClusterState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVaultLink20221107LinkedClusterStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vault link 20221107 linked cluster state based on context it is used
func (m VaultLink20221107LinkedClusterState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
