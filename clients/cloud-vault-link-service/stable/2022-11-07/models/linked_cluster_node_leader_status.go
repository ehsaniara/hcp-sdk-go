// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LinkedClusterNodeLeaderStatus linked cluster node leader status
//
// swagger:model LinkedClusterNodeLeaderStatus
type LinkedClusterNodeLeaderStatus string

func NewLinkedClusterNodeLeaderStatus(value LinkedClusterNodeLeaderStatus) *LinkedClusterNodeLeaderStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LinkedClusterNodeLeaderStatus.
func (m LinkedClusterNodeLeaderStatus) Pointer() *LinkedClusterNodeLeaderStatus {
	return &m
}

const (

	// LinkedClusterNodeLeaderStatusLEADERSTATUSCLUSTERSTATEINVALID captures enum value "LEADER_STATUS_CLUSTER_STATE_INVALID"
	LinkedClusterNodeLeaderStatusLEADERSTATUSCLUSTERSTATEINVALID LinkedClusterNodeLeaderStatus = "LEADER_STATUS_CLUSTER_STATE_INVALID"

	// LinkedClusterNodeLeaderStatusLEADER captures enum value "LEADER"
	LinkedClusterNodeLeaderStatusLEADER LinkedClusterNodeLeaderStatus = "LEADER"

	// LinkedClusterNodeLeaderStatusFOLLOWER captures enum value "FOLLOWER"
	LinkedClusterNodeLeaderStatusFOLLOWER LinkedClusterNodeLeaderStatus = "FOLLOWER"
)

// for schema
var linkedClusterNodeLeaderStatusEnum []interface{}

func init() {
	var res []LinkedClusterNodeLeaderStatus
	if err := json.Unmarshal([]byte(`["LEADER_STATUS_CLUSTER_STATE_INVALID","LEADER","FOLLOWER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		linkedClusterNodeLeaderStatusEnum = append(linkedClusterNodeLeaderStatusEnum, v)
	}
}

func (m LinkedClusterNodeLeaderStatus) validateLinkedClusterNodeLeaderStatusEnum(path, location string, value LinkedClusterNodeLeaderStatus) error {
	if err := validate.EnumCase(path, location, value, linkedClusterNodeLeaderStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this linked cluster node leader status
func (m LinkedClusterNodeLeaderStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLinkedClusterNodeLeaderStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this linked cluster node leader status based on context it is used
func (m LinkedClusterNodeLeaderStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
