// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VaultLink20221107LinkedClusterNodeState vault link 20221107 linked cluster node state
//
// swagger:model vault_link_20221107LinkedClusterNodeState
type VaultLink20221107LinkedClusterNodeState string

func NewVaultLink20221107LinkedClusterNodeState(value VaultLink20221107LinkedClusterNodeState) *VaultLink20221107LinkedClusterNodeState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VaultLink20221107LinkedClusterNodeState.
func (m VaultLink20221107LinkedClusterNodeState) Pointer() *VaultLink20221107LinkedClusterNodeState {
	return &m
}

const (

	// VaultLink20221107LinkedClusterNodeStateLINKEDCLUSTERSTATEINVALID captures enum value "LINKED_CLUSTER_STATE_INVALID"
	VaultLink20221107LinkedClusterNodeStateLINKEDCLUSTERSTATEINVALID VaultLink20221107LinkedClusterNodeState = "LINKED_CLUSTER_STATE_INVALID"

	// VaultLink20221107LinkedClusterNodeStateLINKING captures enum value "LINKING"
	VaultLink20221107LinkedClusterNodeStateLINKING VaultLink20221107LinkedClusterNodeState = "LINKING"

	// VaultLink20221107LinkedClusterNodeStateLINKED captures enum value "LINKED"
	VaultLink20221107LinkedClusterNodeStateLINKED VaultLink20221107LinkedClusterNodeState = "LINKED"

	// VaultLink20221107LinkedClusterNodeStateUNLINKING captures enum value "UNLINKING"
	VaultLink20221107LinkedClusterNodeStateUNLINKING VaultLink20221107LinkedClusterNodeState = "UNLINKING"

	// VaultLink20221107LinkedClusterNodeStateUNLINKED captures enum value "UNLINKED"
	VaultLink20221107LinkedClusterNodeStateUNLINKED VaultLink20221107LinkedClusterNodeState = "UNLINKED"
)

// for schema
var vaultLink20221107LinkedClusterNodeStateEnum []interface{}

func init() {
	var res []VaultLink20221107LinkedClusterNodeState
	if err := json.Unmarshal([]byte(`["LINKED_CLUSTER_STATE_INVALID","LINKING","LINKED","UNLINKING","UNLINKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vaultLink20221107LinkedClusterNodeStateEnum = append(vaultLink20221107LinkedClusterNodeStateEnum, v)
	}
}

func (m VaultLink20221107LinkedClusterNodeState) validateVaultLink20221107LinkedClusterNodeStateEnum(path, location string, value VaultLink20221107LinkedClusterNodeState) error {
	if err := validate.EnumCase(path, location, value, vaultLink20221107LinkedClusterNodeStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vault link 20221107 linked cluster node state
func (m VaultLink20221107LinkedClusterNodeState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVaultLink20221107LinkedClusterNodeStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vault link 20221107 linked cluster node state based on context it is used
func (m VaultLink20221107LinkedClusterNodeState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
