// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudConsulTelemetry20230414ServiceTopologyEdge hashicorp cloud consul telemetry 20230414 service topology edge
//
// swagger:model hashicorp.cloud.consul_telemetry_20230414.ServiceTopology.Edge
type HashicorpCloudConsulTelemetry20230414ServiceTopologyEdge struct {

	// metadata describes the connections/requests between the two services.
	Metadata *HashicorpCloudConsulTelemetry20230414ServiceTopologyEdgeMetadata `json:"metadata,omitempty"`

	// source is the id of the source/downstream/calling service that's connecting to or calling the other.
	Source string `json:"source,omitempty"`

	// target is the id of the destination/upstream/answering service being connected-to/called.
	Target string `json:"target,omitempty"`
}

// Validate validates this hashicorp cloud consul telemetry 20230414 service topology edge
func (m *HashicorpCloudConsulTelemetry20230414ServiceTopologyEdge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudConsulTelemetry20230414ServiceTopologyEdge) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp cloud consul telemetry 20230414 service topology edge based on the context it is used
func (m *HashicorpCloudConsulTelemetry20230414ServiceTopologyEdge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudConsulTelemetry20230414ServiceTopologyEdge) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if swag.IsZero(m.Metadata) { // not required
			return nil
		}

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudConsulTelemetry20230414ServiceTopologyEdge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudConsulTelemetry20230414ServiceTopologyEdge) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudConsulTelemetry20230414ServiceTopologyEdge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
