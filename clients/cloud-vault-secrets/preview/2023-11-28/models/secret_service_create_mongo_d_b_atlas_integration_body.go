// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecretServiceCreateMongoDBAtlasIntegrationBody secret service create mongo d b atlas integration body
//
// swagger:model SecretServiceCreateMongoDBAtlasIntegrationBody
type SecretServiceCreateMongoDBAtlasIntegrationBody struct {

	// integration name
	IntegrationName string `json:"integration_name,omitempty"`

	// mongodb api private key
	MongodbAPIPrivateKey string `json:"mongodb_api_private_key,omitempty"`

	// mongodb api public key
	MongodbAPIPublicKey string `json:"mongodb_api_public_key,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// static credential details
	StaticCredentialDetails *Secrets20231128MongoDBAtlasStaticCredentialsRequest `json:"static_credential_details,omitempty"`
}

// Validate validates this secret service create mongo d b atlas integration body
func (m *SecretServiceCreateMongoDBAtlasIntegrationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStaticCredentialDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretServiceCreateMongoDBAtlasIntegrationBody) validateStaticCredentialDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.StaticCredentialDetails) { // not required
		return nil
	}

	if m.StaticCredentialDetails != nil {
		if err := m.StaticCredentialDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("static_credential_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("static_credential_details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this secret service create mongo d b atlas integration body based on the context it is used
func (m *SecretServiceCreateMongoDBAtlasIntegrationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStaticCredentialDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretServiceCreateMongoDBAtlasIntegrationBody) contextValidateStaticCredentialDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.StaticCredentialDetails != nil {

		if swag.IsZero(m.StaticCredentialDetails) { // not required
			return nil
		}

		if err := m.StaticCredentialDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("static_credential_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("static_credential_details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecretServiceCreateMongoDBAtlasIntegrationBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretServiceCreateMongoDBAtlasIntegrationBody) UnmarshalBinary(b []byte) error {
	var res SecretServiceCreateMongoDBAtlasIntegrationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
