// Code generated by go-swagger; DO NOT EDIT.

package secret_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/hashicorp/hcp-sdk-go/clients/cloud-vault-secrets/preview/2023-11-28/models"
)

// UpsertGcpSmSyncIntegrationReader is a Reader for the UpsertGcpSmSyncIntegration structure.
type UpsertGcpSmSyncIntegrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertGcpSmSyncIntegrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpsertGcpSmSyncIntegrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpsertGcpSmSyncIntegrationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpsertGcpSmSyncIntegrationOK creates a UpsertGcpSmSyncIntegrationOK with default headers values
func NewUpsertGcpSmSyncIntegrationOK() *UpsertGcpSmSyncIntegrationOK {
	return &UpsertGcpSmSyncIntegrationOK{}
}

/*
UpsertGcpSmSyncIntegrationOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpsertGcpSmSyncIntegrationOK struct {
	Payload *models.Secrets20231128UpsertSyncIntegrationResponse
}

// IsSuccess returns true when this upsert gcp sm sync integration o k response has a 2xx status code
func (o *UpsertGcpSmSyncIntegrationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert gcp sm sync integration o k response has a 3xx status code
func (o *UpsertGcpSmSyncIntegrationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert gcp sm sync integration o k response has a 4xx status code
func (o *UpsertGcpSmSyncIntegrationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert gcp sm sync integration o k response has a 5xx status code
func (o *UpsertGcpSmSyncIntegrationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert gcp sm sync integration o k response a status code equal to that given
func (o *UpsertGcpSmSyncIntegrationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upsert gcp sm sync integration o k response
func (o *UpsertGcpSmSyncIntegrationOK) Code() int {
	return 200
}

func (o *UpsertGcpSmSyncIntegrationOK) Error() string {
	return fmt.Sprintf("[PUT /secrets/2023-11-28/organizations/{organization_id}/projects/{project_id}/sync/gcp-sm][%d] upsertGcpSmSyncIntegrationOK  %+v", 200, o.Payload)
}

func (o *UpsertGcpSmSyncIntegrationOK) String() string {
	return fmt.Sprintf("[PUT /secrets/2023-11-28/organizations/{organization_id}/projects/{project_id}/sync/gcp-sm][%d] upsertGcpSmSyncIntegrationOK  %+v", 200, o.Payload)
}

func (o *UpsertGcpSmSyncIntegrationOK) GetPayload() *models.Secrets20231128UpsertSyncIntegrationResponse {
	return o.Payload
}

func (o *UpsertGcpSmSyncIntegrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Secrets20231128UpsertSyncIntegrationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertGcpSmSyncIntegrationDefault creates a UpsertGcpSmSyncIntegrationDefault with default headers values
func NewUpsertGcpSmSyncIntegrationDefault(code int) *UpsertGcpSmSyncIntegrationDefault {
	return &UpsertGcpSmSyncIntegrationDefault{
		_statusCode: code,
	}
}

/*
UpsertGcpSmSyncIntegrationDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type UpsertGcpSmSyncIntegrationDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this upsert gcp sm sync integration default response has a 2xx status code
func (o *UpsertGcpSmSyncIntegrationDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this upsert gcp sm sync integration default response has a 3xx status code
func (o *UpsertGcpSmSyncIntegrationDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this upsert gcp sm sync integration default response has a 4xx status code
func (o *UpsertGcpSmSyncIntegrationDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this upsert gcp sm sync integration default response has a 5xx status code
func (o *UpsertGcpSmSyncIntegrationDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this upsert gcp sm sync integration default response a status code equal to that given
func (o *UpsertGcpSmSyncIntegrationDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the upsert gcp sm sync integration default response
func (o *UpsertGcpSmSyncIntegrationDefault) Code() int {
	return o._statusCode
}

func (o *UpsertGcpSmSyncIntegrationDefault) Error() string {
	return fmt.Sprintf("[PUT /secrets/2023-11-28/organizations/{organization_id}/projects/{project_id}/sync/gcp-sm][%d] UpsertGcpSmSyncIntegration default  %+v", o._statusCode, o.Payload)
}

func (o *UpsertGcpSmSyncIntegrationDefault) String() string {
	return fmt.Sprintf("[PUT /secrets/2023-11-28/organizations/{organization_id}/projects/{project_id}/sync/gcp-sm][%d] UpsertGcpSmSyncIntegration default  %+v", o._statusCode, o.Payload)
}

func (o *UpsertGcpSmSyncIntegrationDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *UpsertGcpSmSyncIntegrationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpsertGcpSmSyncIntegrationBody upsert gcp sm sync integration body
swagger:model UpsertGcpSmSyncIntegrationBody
*/
type UpsertGcpSmSyncIntegrationBody struct {

	// gcp sm connection details
	GcpSmConnectionDetails *models.Secrets20231128GcpSmConnectionDetailsRequest `json:"gcp_sm_connection_details,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this upsert gcp sm sync integration body
func (o *UpsertGcpSmSyncIntegrationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGcpSmConnectionDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpsertGcpSmSyncIntegrationBody) validateGcpSmConnectionDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.GcpSmConnectionDetails) { // not required
		return nil
	}

	if o.GcpSmConnectionDetails != nil {
		if err := o.GcpSmConnectionDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "gcp_sm_connection_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "gcp_sm_connection_details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this upsert gcp sm sync integration body based on the context it is used
func (o *UpsertGcpSmSyncIntegrationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGcpSmConnectionDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpsertGcpSmSyncIntegrationBody) contextValidateGcpSmConnectionDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.GcpSmConnectionDetails != nil {

		if swag.IsZero(o.GcpSmConnectionDetails) { // not required
			return nil
		}

		if err := o.GcpSmConnectionDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "gcp_sm_connection_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "gcp_sm_connection_details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpsertGcpSmSyncIntegrationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpsertGcpSmSyncIntegrationBody) UnmarshalBinary(b []byte) error {
	var res UpsertGcpSmSyncIntegrationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
