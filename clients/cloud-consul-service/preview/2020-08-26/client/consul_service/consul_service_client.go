// Code generated by go-swagger; DO NOT EDIT.

package consul_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new consul service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for consul service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ConsulServiceCreate(params *ConsulServiceCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceCreateOK, error)

	ConsulServiceCreateCustomerMasterACLToken(params *ConsulServiceCreateCustomerMasterACLTokenParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceCreateCustomerMasterACLTokenOK, error)

	ConsulServiceCreateSnapshot(params *ConsulServiceCreateSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceCreateSnapshotOK, error)

	ConsulServiceDelete(params *ConsulServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceDeleteOK, error)

	ConsulServiceDeleteSnapshot(params *ConsulServiceDeleteSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceDeleteSnapshotOK, error)

	ConsulServiceGet(params *ConsulServiceGetParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceGetOK, error)

	ConsulServiceGetClientConfig(params *ConsulServiceGetClientConfigParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceGetClientConfigOK, error)

	ConsulServiceGetSnapshot(params *ConsulServiceGetSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceGetSnapshotOK, error)

	ConsulServiceList(params *ConsulServiceListParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListOK, error)

	ConsulServiceListSnapshots(params *ConsulServiceListSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListSnapshotsOK, error)

	ConsulServiceListUpgradeVersions(params *ConsulServiceListUpgradeVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListUpgradeVersionsOK, error)

	ConsulServiceListVersions(params *ConsulServiceListVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListVersionsOK, error)

	ConsulServiceListVersions2(params *ConsulServiceListVersions2Params, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListVersions2OK, error)

	ConsulServiceRestoreSnapshot(params *ConsulServiceRestoreSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceRestoreSnapshotOK, error)

	ConsulServiceUpdate(params *ConsulServiceUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceUpdateOK, error)

	ConsulServiceUpdateSnapshot(params *ConsulServiceUpdateSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceUpdateSnapshotOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ConsulServiceCreate creates creates a new h c p consul cluster
*/
func (a *Client) ConsulServiceCreate(params *ConsulServiceCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_Create",
		Method:             "POST",
		PathPattern:        "/consul/2020-08-26/organizations/{cluster.location.organization_id}/projects/{cluster.location.project_id}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceCreateCustomerMasterACLToken creates customer master ACL token creates a new master ACL token for the customer on the specified cluster external clients will invoke this endpoint to re generate new master tokens
*/
func (a *Client) ConsulServiceCreateCustomerMasterACLToken(params *ConsulServiceCreateCustomerMasterACLTokenParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceCreateCustomerMasterACLTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceCreateCustomerMasterACLTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_CreateCustomerMasterACLToken",
		Method:             "POST",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{id}/master-acl-tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceCreateCustomerMasterACLTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceCreateCustomerMasterACLTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceCreateCustomerMasterACLTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceCreateSnapshot creates snapshot takes a new snapshot asynchronously
*/
func (a *Client) ConsulServiceCreateSnapshot(params *ConsulServiceCreateSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceCreateSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceCreateSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_CreateSnapshot",
		Method:             "POST",
		PathPattern:        "/consul/2020-08-26/organizations/{resource.location.organization_id}/projects/{resource.location.project_id}/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceCreateSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceCreateSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceCreateSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceDelete deletes deletes the specified h c p consul cluster
*/
func (a *Client) ConsulServiceDelete(params *ConsulServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_Delete",
		Method:             "DELETE",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceDeleteSnapshot deletes snapshot removes the snapshot from storage asynchronously
*/
func (a *Client) ConsulServiceDeleteSnapshot(params *ConsulServiceDeleteSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceDeleteSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceDeleteSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_DeleteSnapshot",
		Method:             "DELETE",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/snapshots/{snapshot_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceDeleteSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceDeleteSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceDeleteSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceGet gets reads a single h c p consul cluster
*/
func (a *Client) ConsulServiceGet(params *ConsulServiceGetParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_Get",
		Method:             "GET",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceGetClientConfig gets client config files returns the config files for a consul agent running in client mode the files are base64 encoded
*/
func (a *Client) ConsulServiceGetClientConfig(params *ConsulServiceGetClientConfigParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceGetClientConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceGetClientConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_GetClientConfig",
		Method:             "GET",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{id}/client-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceGetClientConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceGetClientConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceGetClientConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceGetSnapshot gets snapshot retrieves an existing snapshot
*/
func (a *Client) ConsulServiceGetSnapshot(params *ConsulServiceGetSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceGetSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceGetSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_GetSnapshot",
		Method:             "GET",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/snapshots/{snapshot_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceGetSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceGetSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceGetSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceList lists lists all h c p consul clusters
*/
func (a *Client) ConsulServiceList(params *ConsulServiceListParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_List",
		Method:             "GET",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceListSnapshots lists snapshots lists snapshots
*/
func (a *Client) ConsulServiceListSnapshots(params *ConsulServiceListSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceListSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_ListSnapshots",
		Method:             "GET",
		PathPattern:        "/consul/2020-08-26/organizations/{resource.location.organization_id}/projects/{resource.location.project_id}/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceListSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceListSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceListSnapshotsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceListUpgradeVersions lists upgrade versions returns the versions available for this consul cluster to upgrade to
*/
func (a *Client) ConsulServiceListUpgradeVersions(params *ConsulServiceListUpgradeVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListUpgradeVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceListUpgradeVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_ListUpgradeVersions",
		Method:             "GET",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{id}/upgrade-versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceListUpgradeVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceListUpgradeVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceListUpgradeVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceListVersions lists versions returns the versions available for this org and project
*/
func (a *Client) ConsulServiceListVersions(params *ConsulServiceListVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceListVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_ListVersions",
		Method:             "GET",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceListVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceListVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceListVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceListVersions2 lists versions returns the versions available for this org and project
*/
func (a *Client) ConsulServiceListVersions2(params *ConsulServiceListVersions2Params, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceListVersions2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceListVersions2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_ListVersions2",
		Method:             "GET",
		PathPattern:        "/consul/2020-08-26/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceListVersions2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceListVersions2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceListVersions2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceRestoreSnapshot restores snapshot restores a snapshot on a given cluster asynchronously
*/
func (a *Client) ConsulServiceRestoreSnapshot(params *ConsulServiceRestoreSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceRestoreSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceRestoreSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_RestoreSnapshot",
		Method:             "POST",
		PathPattern:        "/consul/2020-08-26/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{cluster_id}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceRestoreSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceRestoreSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceRestoreSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceUpdate updates updates the properties of an existing h c p consul cluster
*/
func (a *Client) ConsulServiceUpdate(params *ConsulServiceUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_Update",
		Method:             "PATCH",
		PathPattern:        "/consul/2020-08-26/organizations/{cluster.location.organization_id}/projects/{cluster.location.project_id}/clusters/{cluster.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsulServiceUpdateSnapshot updates snapshot updates an existing snapshot

  Right now only the name can be changed.
*/
func (a *Client) ConsulServiceUpdateSnapshot(params *ConsulServiceUpdateSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ConsulServiceUpdateSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsulServiceUpdateSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsulService_UpdateSnapshot",
		Method:             "PATCH",
		PathPattern:        "/consul/2020-08-26/organizations/{snapshot.location.organization_id}/projects/{snapshot.location.project_id}/snapshots/{snapshot.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsulServiceUpdateSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsulServiceUpdateSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsulServiceUpdateSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
