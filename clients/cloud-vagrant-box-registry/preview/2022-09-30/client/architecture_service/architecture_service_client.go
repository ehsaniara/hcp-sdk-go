// Code generated by go-swagger; DO NOT EDIT.

package architecture_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new architecture service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for architecture service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CompleteDirectUploadBox(params *CompleteDirectUploadBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompleteDirectUploadBoxOK, error)

	CompleteUploadBox(params *CompleteUploadBoxParams, opts ...ClientOption) (*CompleteUploadBoxOK, error)

	CreateArchitecture(params *CreateArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArchitectureOK, error)

	DeleteArchitecture(params *DeleteArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArchitectureOK, error)

	DirectUploadBox(params *DirectUploadBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DirectUploadBoxOK, error)

	DownloadBox(params *DownloadBoxParams, opts ...ClientOption) (*DownloadBoxOK, error)

	ListArchitectures(params *ListArchitecturesParams, opts ...ClientOption) (*ListArchitecturesOK, error)

	ReadArchitecture(params *ReadArchitectureParams, opts ...ClientOption) (*ReadArchitectureOK, error)

	UpdateArchitecture(params *UpdateArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateArchitectureOK, error)

	UploadBox(params *UploadBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadBoxOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CompleteDirectUploadBox completes direct upload box is a callback endpoint used to signal than a direct to backend storage upload of boxfile is finished
*/
func (a *Client) CompleteDirectUploadBox(params *CompleteDirectUploadBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompleteDirectUploadBoxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompleteDirectUploadBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CompleteDirectUploadBox",
		Method:             "PUT",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures/{architecture}/direct/complete/{object}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompleteDirectUploadBoxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompleteDirectUploadBoxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompleteDirectUploadBoxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompleteUploadBox completes upload box is a callback endpoint used to signal that an upload of boxfile is finished
*/
func (a *Client) CompleteUploadBox(params *CompleteUploadBoxParams, opts ...ClientOption) (*CompleteUploadBoxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompleteUploadBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CompleteUploadBox",
		Method:             "PUT",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures/{architecture}/complete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompleteUploadBoxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompleteUploadBoxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompleteUploadBoxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateArchitecture creates architecture creates a architecture in the specified version
*/
func (a *Client) CreateArchitecture(params *CreateArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArchitectureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateArchitecture",
		Method:             "PUT",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateArchitectureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateArchitectureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteArchitecture deletes architecture deletes a architecture note that this deletes any box data associated with an architecture so use with care
*/
func (a *Client) DeleteArchitecture(params *DeleteArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArchitectureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteArchitecture",
		Method:             "DELETE",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures/{architecture}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArchitectureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteArchitectureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DirectUploadBox directs upload box initiates the upload of a single hosted boxfile directly to the backend storage the service will return details that can be used to upload the data over HTTP
*/
func (a *Client) DirectUploadBox(params *DirectUploadBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DirectUploadBoxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDirectUploadBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DirectUploadBox",
		Method:             "GET",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures/{architecture}/direct/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DirectUploadBoxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DirectUploadBoxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DirectUploadBoxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DownloadBox downloads initiates a boxfile download

	For Archivist-hosted Boxfile, this is an atomic call that prepares the

Provider for download from the object storage. For externally-hosted
Boxfiles, this is simply a pass-through to the external download data
supplied in the record.
*/
func (a *Client) DownloadBox(params *DownloadBoxParams, opts ...ClientOption) (*DownloadBoxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadBox",
		Method:             "GET",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures/{architecture}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadBoxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadBoxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DownloadBoxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListArchitectures lists architectures lists all architectures within a provider
*/
func (a *Client) ListArchitectures(params *ListArchitecturesParams, opts ...ClientOption) (*ListArchitecturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListArchitecturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListArchitectures",
		Method:             "GET",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListArchitecturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListArchitecturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListArchitecturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadArchitecture reads architecture fetches a architecture for the specified provider
*/
func (a *Client) ReadArchitecture(params *ReadArchitectureParams, opts ...ClientOption) (*ReadArchitectureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadArchitecture",
		Method:             "GET",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures/{architecture}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadArchitectureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadArchitectureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateArchitecture updates architecture updates details about a specified architecture
*/
func (a *Client) UpdateArchitecture(params *UpdateArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateArchitectureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateArchitecture",
		Method:             "PATCH",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures/{architecture}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateArchitectureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateArchitectureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UploadBox uploads box initiates the upload of a single hosted boxfile the service will return details that can be used to upload the data over HTTP

	Overwrite is permitted; old/existing data for a particular Architecture will

be replaced with data from a new successful upload for that same
Architecture.
*/
func (a *Client) UploadBox(params *UploadBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadBoxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UploadBox",
		Method:             "GET",
		PathPattern:        "/vagrant/2022-09-30/registry/{registry}/boxes/{box}/versions/{version}/providers/{provider}/architectures/{architecture}/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadBoxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadBoxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UploadBoxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
