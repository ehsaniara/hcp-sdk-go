// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LogService20210330Status Status is the status of an ArchiveRequest
//
// swagger:model log_service_20210330Status
type LogService20210330Status string

func NewLogService20210330Status(value LogService20210330Status) *LogService20210330Status {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LogService20210330Status.
func (m LogService20210330Status) Pointer() *LogService20210330Status {
	return &m
}

const (

	// LogService20210330StatusSTATUSUNSET captures enum value "STATUS_UNSET"
	LogService20210330StatusSTATUSUNSET LogService20210330Status = "STATUS_UNSET"

	// LogService20210330StatusSTATUSPROCESSING captures enum value "STATUS_PROCESSING"
	LogService20210330StatusSTATUSPROCESSING LogService20210330Status = "STATUS_PROCESSING"

	// LogService20210330StatusSTATUSCOMPLETED captures enum value "STATUS_COMPLETED"
	LogService20210330StatusSTATUSCOMPLETED LogService20210330Status = "STATUS_COMPLETED"

	// LogService20210330StatusSTATUSFAILED captures enum value "STATUS_FAILED"
	LogService20210330StatusSTATUSFAILED LogService20210330Status = "STATUS_FAILED"
)

// for schema
var logService20210330StatusEnum []interface{}

func init() {
	var res []LogService20210330Status
	if err := json.Unmarshal([]byte(`["STATUS_UNSET","STATUS_PROCESSING","STATUS_COMPLETED","STATUS_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logService20210330StatusEnum = append(logService20210330StatusEnum, v)
	}
}

func (m LogService20210330Status) validateLogService20210330StatusEnum(path, location string, value LogService20210330Status) error {
	if err := validate.EnumCase(path, location, value, logService20210330StatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this log service 20210330 status
func (m LogService20210330Status) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogService20210330StatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this log service 20210330 status based on context it is used
func (m LogService20210330Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
