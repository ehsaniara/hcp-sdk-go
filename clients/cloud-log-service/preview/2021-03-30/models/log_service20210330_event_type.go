// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LogService20210330EventType log service 20210330 event type
//
// swagger:model log_service_20210330EventType
type LogService20210330EventType string

func NewLogService20210330EventType(value LogService20210330EventType) *LogService20210330EventType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LogService20210330EventType.
func (m LogService20210330EventType) Pointer() *LogService20210330EventType {
	return &m
}

const (

	// LogService20210330EventTypeEVENTTYPEUNSET captures enum value "EVENT_TYPE_UNSET"
	LogService20210330EventTypeEVENTTYPEUNSET LogService20210330EventType = "EVENT_TYPE_UNSET"

	// LogService20210330EventTypeEVENTTYPEAUDITLOG captures enum value "EVENT_TYPE_AUDIT_LOG"
	LogService20210330EventTypeEVENTTYPEAUDITLOG LogService20210330EventType = "EVENT_TYPE_AUDIT_LOG"

	// LogService20210330EventTypeEVENTTYPESERVERLOGSTDOUT captures enum value "EVENT_TYPE_SERVER_LOG_STDOUT"
	LogService20210330EventTypeEVENTTYPESERVERLOGSTDOUT LogService20210330EventType = "EVENT_TYPE_SERVER_LOG_STDOUT"

	// LogService20210330EventTypeEVENTTYPESERVERLOGSTDERR captures enum value "EVENT_TYPE_SERVER_LOG_STDERR"
	LogService20210330EventTypeEVENTTYPESERVERLOGSTDERR LogService20210330EventType = "EVENT_TYPE_SERVER_LOG_STDERR"
)

// for schema
var logService20210330EventTypeEnum []interface{}

func init() {
	var res []LogService20210330EventType
	if err := json.Unmarshal([]byte(`["EVENT_TYPE_UNSET","EVENT_TYPE_AUDIT_LOG","EVENT_TYPE_SERVER_LOG_STDOUT","EVENT_TYPE_SERVER_LOG_STDERR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logService20210330EventTypeEnum = append(logService20210330EventTypeEnum, v)
	}
}

func (m LogService20210330EventType) validateLogService20210330EventTypeEnum(path, location string, value LogService20210330EventType) error {
	if err := validate.EnumCase(path, location, value, logService20210330EventTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this log service 20210330 event type
func (m LogService20210330EventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogService20210330EventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this log service 20210330 event type based on context it is used
func (m LogService20210330EventType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
