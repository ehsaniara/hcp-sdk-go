// Code generated by go-swagger; DO NOT EDIT.

package service_principals_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service principals service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service principals service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOrganizationServicePrincipal(params *CreateOrganizationServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationServicePrincipalOK, error)

	CreateOrganizationServicePrincipalKey(params *CreateOrganizationServicePrincipalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationServicePrincipalKeyOK, error)

	CreateProjectServicePrincipal(params *CreateProjectServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectServicePrincipalOK, error)

	CreateProjectServicePrincipalKey(params *CreateProjectServicePrincipalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectServicePrincipalKeyOK, error)

	CreateWorkloadIdentityProvider(params *CreateWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWorkloadIdentityProviderOK, error)

	DeleteOrganizationServicePrincipal(params *DeleteOrganizationServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationServicePrincipalOK, error)

	DeleteOrganizationServicePrincipalKey(params *DeleteOrganizationServicePrincipalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationServicePrincipalKeyOK, error)

	DeleteProjectServicePrincipal(params *DeleteProjectServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectServicePrincipalOK, error)

	DeleteProjectServicePrincipalKey(params *DeleteProjectServicePrincipalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectServicePrincipalKeyOK, error)

	DeleteWorkloadIdentityProvider(params *DeleteWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkloadIdentityProviderOK, error)

	ExchangeWorkloadIdentityToken(params *ExchangeWorkloadIdentityTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExchangeWorkloadIdentityTokenOK, error)

	GetOrganizationServicePrincipal(params *GetOrganizationServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationServicePrincipalOK, error)

	GetProjectServicePrincipal(params *GetProjectServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectServicePrincipalOK, error)

	GetWorkloadIdentityProvider(params *GetWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkloadIdentityProviderOK, error)

	ListOrganizationServicePrincipals(params *ListOrganizationServicePrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationServicePrincipalsOK, error)

	ListProjectServicePrincipals(params *ListProjectServicePrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectServicePrincipalsOK, error)

	ListWorkloadIdentityProvider(params *ListWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWorkloadIdentityProviderOK, error)

	UpdateWorkloadIdentityProvider(params *UpdateWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWorkloadIdentityProviderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateOrganizationServicePrincipal creates organization service principal creates a new service principal on organization level
*/
func (a *Client) CreateOrganizationServicePrincipal(params *CreateOrganizationServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationServicePrincipalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationServicePrincipalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOrganizationServicePrincipal",
		Method:             "POST",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/service-principals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrganizationServicePrincipalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationServicePrincipalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOrganizationServicePrincipalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateOrganizationServicePrincipalKey creates organization service principal key creates a new service principal key for a service principal on organization level
*/
func (a *Client) CreateOrganizationServicePrincipalKey(params *CreateOrganizationServicePrincipalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationServicePrincipalKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationServicePrincipalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOrganizationServicePrincipalKey",
		Method:             "POST",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/service-principal-keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrganizationServicePrincipalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationServicePrincipalKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOrganizationServicePrincipalKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateProjectServicePrincipal creates project service principal creates a new service principal on project level
*/
func (a *Client) CreateProjectServicePrincipal(params *CreateProjectServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectServicePrincipalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectServicePrincipalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateProjectServicePrincipal",
		Method:             "POST",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/projects/{project_id}/service-principals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectServicePrincipalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectServicePrincipalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProjectServicePrincipalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateProjectServicePrincipalKey creates project service principal key creates a new service principal key for a service principal on project level
*/
func (a *Client) CreateProjectServicePrincipalKey(params *CreateProjectServicePrincipalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectServicePrincipalKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectServicePrincipalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateProjectServicePrincipalKey",
		Method:             "POST",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/projects/{project_id}/service-principal-keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectServicePrincipalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectServicePrincipalKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProjectServicePrincipalKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateWorkloadIdentityProvider creates workload identity provider creates a workload identity provider nested under a service principal
*/
func (a *Client) CreateWorkloadIdentityProvider(params *CreateWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWorkloadIdentityProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkloadIdentityProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateWorkloadIdentityProvider",
		Method:             "POST",
		PathPattern:        "/2019-12-10/{parent_resource_name}/workload-identity-providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWorkloadIdentityProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWorkloadIdentityProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateWorkloadIdentityProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOrganizationServicePrincipal deletes organization service principal deletes a service principal on organization level
*/
func (a *Client) DeleteOrganizationServicePrincipal(params *DeleteOrganizationServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationServicePrincipalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationServicePrincipalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOrganizationServicePrincipal",
		Method:             "DELETE",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/service-principals/{principal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationServicePrincipalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationServicePrincipalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOrganizationServicePrincipalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOrganizationServicePrincipalKey deletes organization service principal key deletes a service principal key for a service principal on organization level
*/
func (a *Client) DeleteOrganizationServicePrincipalKey(params *DeleteOrganizationServicePrincipalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationServicePrincipalKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationServicePrincipalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOrganizationServicePrincipalKey",
		Method:             "DELETE",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/service-principal-keys/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationServicePrincipalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationServicePrincipalKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOrganizationServicePrincipalKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteProjectServicePrincipal deletes service principal deletes a service principal on project level
*/
func (a *Client) DeleteProjectServicePrincipal(params *DeleteProjectServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectServicePrincipalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectServicePrincipalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectServicePrincipal",
		Method:             "DELETE",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/projects/{project_id}/service-principals/{principal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectServicePrincipalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectServicePrincipalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProjectServicePrincipalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteProjectServicePrincipalKey deletes project service principal key deletes a service principal key for a service principal on project level
*/
func (a *Client) DeleteProjectServicePrincipalKey(params *DeleteProjectServicePrincipalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectServicePrincipalKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectServicePrincipalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectServicePrincipalKey",
		Method:             "DELETE",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/projects/{project_id}/service-principal-keys/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectServicePrincipalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectServicePrincipalKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProjectServicePrincipalKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteWorkloadIdentityProvider deletes workload identity provider deletes a workload identity provider
*/
func (a *Client) DeleteWorkloadIdentityProvider(params *DeleteWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkloadIdentityProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkloadIdentityProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteWorkloadIdentityProvider",
		Method:             "DELETE",
		PathPattern:        "/2019-12-10/{resource_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWorkloadIdentityProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkloadIdentityProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWorkloadIdentityProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ExchangeWorkloadIdentityToken exchanges workload identity token exchanges an external workload identity token for an access token whose subject is that of the service principal the identity federation is nested under
*/
func (a *Client) ExchangeWorkloadIdentityToken(params *ExchangeWorkloadIdentityTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExchangeWorkloadIdentityTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExchangeWorkloadIdentityTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExchangeWorkloadIdentityToken",
		Method:             "POST",
		PathPattern:        "/2019-12-10/{resource_name}/exchange-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExchangeWorkloadIdentityTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExchangeWorkloadIdentityTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExchangeWorkloadIdentityTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetOrganizationServicePrincipal gets organization service principal retrieves a service principal on organization level
*/
func (a *Client) GetOrganizationServicePrincipal(params *GetOrganizationServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationServicePrincipalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationServicePrincipalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationServicePrincipal",
		Method:             "GET",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/service-principals/{principal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationServicePrincipalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationServicePrincipalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOrganizationServicePrincipalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProjectServicePrincipal gets project service principal retrieves a service principal on project level
*/
func (a *Client) GetProjectServicePrincipal(params *GetProjectServicePrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectServicePrincipalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectServicePrincipalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectServicePrincipal",
		Method:             "GET",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/projects/{project_id}/service-principals/{principal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectServicePrincipalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectServicePrincipalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProjectServicePrincipalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkloadIdentityProvider gets workload identity provider retrieves a workload identity provider
*/
func (a *Client) GetWorkloadIdentityProvider(params *GetWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkloadIdentityProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkloadIdentityProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkloadIdentityProvider",
		Method:             "GET",
		PathPattern:        "/2019-12-10/{resource_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkloadIdentityProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkloadIdentityProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkloadIdentityProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListOrganizationServicePrincipals lists project service principals lists service principals in an organization
*/
func (a *Client) ListOrganizationServicePrincipals(params *ListOrganizationServicePrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationServicePrincipalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrganizationServicePrincipalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListOrganizationServicePrincipals",
		Method:             "GET",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/service-principals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListOrganizationServicePrincipalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOrganizationServicePrincipalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListOrganizationServicePrincipalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListProjectServicePrincipals lists project service principals lists service principals in a project
*/
func (a *Client) ListProjectServicePrincipals(params *ListProjectServicePrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectServicePrincipalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectServicePrincipalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListProjectServicePrincipals",
		Method:             "GET",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/projects/{project_id}/service-principals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectServicePrincipalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectServicePrincipalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectServicePrincipalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListWorkloadIdentityProvider lists workload identity provider lists workload identity providers under a service principal
*/
func (a *Client) ListWorkloadIdentityProvider(params *ListWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWorkloadIdentityProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWorkloadIdentityProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListWorkloadIdentityProvider",
		Method:             "GET",
		PathPattern:        "/2019-12-10/{parent_resource_name}/workload-identity-providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListWorkloadIdentityProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListWorkloadIdentityProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListWorkloadIdentityProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateWorkloadIdentityProvider updates workload identity provider updates a workload identity provider
*/
func (a *Client) UpdateWorkloadIdentityProvider(params *UpdateWorkloadIdentityProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWorkloadIdentityProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkloadIdentityProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateWorkloadIdentityProvider",
		Method:             "PATCH",
		PathPattern:        "/2019-12-10/{provider.resource_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateWorkloadIdentityProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWorkloadIdentityProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateWorkloadIdentityProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
