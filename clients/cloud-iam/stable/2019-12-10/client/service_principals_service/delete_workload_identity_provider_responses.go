// Code generated by go-swagger; DO NOT EDIT.

package service_principals_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hashicorp/hcp-sdk-go/clients/cloud-iam/stable/2019-12-10/models"
	cloud "github.com/hashicorp/hcp-sdk-go/clients/cloud-shared/v1/models"
)

// DeleteWorkloadIdentityProviderReader is a Reader for the DeleteWorkloadIdentityProvider structure.
type DeleteWorkloadIdentityProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteWorkloadIdentityProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteWorkloadIdentityProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDeleteWorkloadIdentityProviderDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteWorkloadIdentityProviderOK creates a DeleteWorkloadIdentityProviderOK with default headers values
func NewDeleteWorkloadIdentityProviderOK() *DeleteWorkloadIdentityProviderOK {
	return &DeleteWorkloadIdentityProviderOK{}
}

/*
DeleteWorkloadIdentityProviderOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteWorkloadIdentityProviderOK struct {
	Payload *models.HashicorpCloudIamDeleteWorkloadIdentityProviderResponse
}

// IsSuccess returns true when this delete workload identity provider o k response has a 2xx status code
func (o *DeleteWorkloadIdentityProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete workload identity provider o k response has a 3xx status code
func (o *DeleteWorkloadIdentityProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workload identity provider o k response has a 4xx status code
func (o *DeleteWorkloadIdentityProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete workload identity provider o k response has a 5xx status code
func (o *DeleteWorkloadIdentityProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workload identity provider o k response a status code equal to that given
func (o *DeleteWorkloadIdentityProviderOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteWorkloadIdentityProviderOK) Error() string {
	return fmt.Sprintf("[DELETE /2019-12-10/{resource_name}][%d] deleteWorkloadIdentityProviderOK  %+v", 200, o.Payload)
}

func (o *DeleteWorkloadIdentityProviderOK) String() string {
	return fmt.Sprintf("[DELETE /2019-12-10/{resource_name}][%d] deleteWorkloadIdentityProviderOK  %+v", 200, o.Payload)
}

func (o *DeleteWorkloadIdentityProviderOK) GetPayload() *models.HashicorpCloudIamDeleteWorkloadIdentityProviderResponse {
	return o.Payload
}

func (o *DeleteWorkloadIdentityProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HashicorpCloudIamDeleteWorkloadIdentityProviderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWorkloadIdentityProviderDefault creates a DeleteWorkloadIdentityProviderDefault with default headers values
func NewDeleteWorkloadIdentityProviderDefault(code int) *DeleteWorkloadIdentityProviderDefault {
	return &DeleteWorkloadIdentityProviderDefault{
		_statusCode: code,
	}
}

/*
DeleteWorkloadIdentityProviderDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type DeleteWorkloadIdentityProviderDefault struct {
	_statusCode int

	Payload *cloud.GoogleRPCStatus
}

// Code gets the status code for the delete workload identity provider default response
func (o *DeleteWorkloadIdentityProviderDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this delete workload identity provider default response has a 2xx status code
func (o *DeleteWorkloadIdentityProviderDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete workload identity provider default response has a 3xx status code
func (o *DeleteWorkloadIdentityProviderDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete workload identity provider default response has a 4xx status code
func (o *DeleteWorkloadIdentityProviderDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete workload identity provider default response has a 5xx status code
func (o *DeleteWorkloadIdentityProviderDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete workload identity provider default response a status code equal to that given
func (o *DeleteWorkloadIdentityProviderDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *DeleteWorkloadIdentityProviderDefault) Error() string {
	return fmt.Sprintf("[DELETE /2019-12-10/{resource_name}][%d] DeleteWorkloadIdentityProvider default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteWorkloadIdentityProviderDefault) String() string {
	return fmt.Sprintf("[DELETE /2019-12-10/{resource_name}][%d] DeleteWorkloadIdentityProvider default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteWorkloadIdentityProviderDefault) GetPayload() *cloud.GoogleRPCStatus {
	return o.Payload
}

func (o *DeleteWorkloadIdentityProviderDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(cloud.GoogleRPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
