// Code generated by go-swagger; DO NOT EDIT.

package iam_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetUserPrincipalByIDInOrganizationParams creates a new GetUserPrincipalByIDInOrganizationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUserPrincipalByIDInOrganizationParams() *GetUserPrincipalByIDInOrganizationParams {
	return &GetUserPrincipalByIDInOrganizationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserPrincipalByIDInOrganizationParamsWithTimeout creates a new GetUserPrincipalByIDInOrganizationParams object
// with the ability to set a timeout on a request.
func NewGetUserPrincipalByIDInOrganizationParamsWithTimeout(timeout time.Duration) *GetUserPrincipalByIDInOrganizationParams {
	return &GetUserPrincipalByIDInOrganizationParams{
		timeout: timeout,
	}
}

// NewGetUserPrincipalByIDInOrganizationParamsWithContext creates a new GetUserPrincipalByIDInOrganizationParams object
// with the ability to set a context for a request.
func NewGetUserPrincipalByIDInOrganizationParamsWithContext(ctx context.Context) *GetUserPrincipalByIDInOrganizationParams {
	return &GetUserPrincipalByIDInOrganizationParams{
		Context: ctx,
	}
}

// NewGetUserPrincipalByIDInOrganizationParamsWithHTTPClient creates a new GetUserPrincipalByIDInOrganizationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUserPrincipalByIDInOrganizationParamsWithHTTPClient(client *http.Client) *GetUserPrincipalByIDInOrganizationParams {
	return &GetUserPrincipalByIDInOrganizationParams{
		HTTPClient: client,
	}
}

/*
GetUserPrincipalByIDInOrganizationParams contains all the parameters to send to the API endpoint

	for the get user principal by Id in organization operation.

	Typically these are written to a http.Request.
*/
type GetUserPrincipalByIDInOrganizationParams struct {

	/* OrganizationID.

	   organization_id is the organization_id the requested user principal belongs to.
	*/
	OrganizationID string

	/* UserPrincipalID.

	   user_principal_id is the user ID for the requested user principal.
	*/
	UserPrincipalID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get user principal by Id in organization params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserPrincipalByIDInOrganizationParams) WithDefaults() *GetUserPrincipalByIDInOrganizationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get user principal by Id in organization params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserPrincipalByIDInOrganizationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) WithTimeout(timeout time.Duration) *GetUserPrincipalByIDInOrganizationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) WithContext(ctx context.Context) *GetUserPrincipalByIDInOrganizationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) WithHTTPClient(client *http.Client) *GetUserPrincipalByIDInOrganizationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationID adds the organizationID to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) WithOrganizationID(organizationID string) *GetUserPrincipalByIDInOrganizationParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithUserPrincipalID adds the userPrincipalID to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) WithUserPrincipalID(userPrincipalID string) *GetUserPrincipalByIDInOrganizationParams {
	o.SetUserPrincipalID(userPrincipalID)
	return o
}

// SetUserPrincipalID adds the userPrincipalId to the get user principal by Id in organization params
func (o *GetUserPrincipalByIDInOrganizationParams) SetUserPrincipalID(userPrincipalID string) {
	o.UserPrincipalID = userPrincipalID
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserPrincipalByIDInOrganizationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param organization_id
	if err := r.SetPathParam("organization_id", o.OrganizationID); err != nil {
		return err
	}

	// path param user_principal_id
	if err := r.SetPathParam("user_principal_id", o.UserPrincipalID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
