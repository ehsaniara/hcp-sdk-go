// Code generated by go-swagger; DO NOT EDIT.

package iam_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new iam service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for iam service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserPrincipal(params *CreateUserPrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserPrincipalOK, error)

	DeleteOrganizationMembership(params *DeleteOrganizationMembershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationMembershipOK, error)

	GetCurrentUserPrincipal(params *GetCurrentUserPrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserPrincipalOK, error)

	GetOrganizationAuthMetadata(params *GetOrganizationAuthMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAuthMetadataOK, error)

	GetUserPrincipalByIDInOrganization(params *GetUserPrincipalByIDInOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserPrincipalByIDInOrganizationOK, error)

	GetUserPrincipalsByIDsInOrganization(params *GetUserPrincipalsByIDsInOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserPrincipalsByIDsInOrganizationOK, error)

	ListUserPrincipalsByOrganization(params *ListUserPrincipalsByOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserPrincipalsByOrganizationOK, error)

	Ping(params *PingParams, opts ...ClientOption) (*PingOK, error)

	SearchPrincipals(params *SearchPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPrincipalsOK, error)

	UpdateWebConsolePreferences(params *UpdateWebConsolePreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebConsolePreferencesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateUserPrincipal creates user principal creates a new user principal
*/
func (a *Client) CreateUserPrincipal(params *CreateUserPrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserPrincipalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserPrincipalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUserPrincipal",
		Method:             "POST",
		PathPattern:        "/iam/2019-12-10/user-principals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserPrincipalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserPrincipalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserPrincipalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOrganizationMembership deletes organization membership deletes a user principal s organization membership
*/
func (a *Client) DeleteOrganizationMembership(params *DeleteOrganizationMembershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationMembershipParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOrganizationMembership",
		Method:             "DELETE",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/user-principals/{user_principal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationMembershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationMembershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOrganizationMembershipDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCurrentUserPrincipal gets current user principal retrieves information about the current user principal this endpoint it meant to be used by external clients over an HTTP API it supports retrieving the basic user principal data useful for any client and optionally the user preferences for the h c p web portal j s application
*/
func (a *Client) GetCurrentUserPrincipal(params *GetCurrentUserPrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserPrincipalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentUserPrincipalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCurrentUserPrincipal",
		Method:             "GET",
		PathPattern:        "/iam/2019-12-10/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentUserPrincipalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentUserPrincipalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCurrentUserPrincipalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetOrganizationAuthMetadata gets organization auth metadata returns metadata about the organization s configured authentication methods
*/
func (a *Client) GetOrganizationAuthMetadata(params *GetOrganizationAuthMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAuthMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAuthMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationAuthMetadata",
		Method:             "GET",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/auth-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationAuthMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAuthMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOrganizationAuthMetadataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetUserPrincipalByIDInOrganization gets user principal retrieves a user principal
*/
func (a *Client) GetUserPrincipalByIDInOrganization(params *GetUserPrincipalByIDInOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserPrincipalByIDInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPrincipalByIDInOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserPrincipalByIdInOrganization",
		Method:             "GET",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/user-principals/{user_principal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserPrincipalByIDInOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPrincipalByIDInOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserPrincipalByIDInOrganizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetUserPrincipalsByIDsInOrganization gets user principals by i ds in organization is a batch method to fetch users by ID for a given organization if some of the requested users don t exist or aren t members of the given organization then they will be omitted in response we re using p o s t because g e t has a length limitation for URL which is given that user id is UUID would limit us to fetching up to 48 users at a time which is less than ideal
*/
func (a *Client) GetUserPrincipalsByIDsInOrganization(params *GetUserPrincipalsByIDsInOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserPrincipalsByIDsInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPrincipalsByIDsInOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserPrincipalsByIDsInOrganization",
		Method:             "POST",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/user-principals/batch-fetch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserPrincipalsByIDsInOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPrincipalsByIDsInOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserPrincipalsByIDsInOrganizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListUserPrincipalsByOrganization lists user principals by organization returns a list of principals that are members of an organization
*/
func (a *Client) ListUserPrincipalsByOrganization(params *ListUserPrincipalsByOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserPrincipalsByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserPrincipalsByOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListUserPrincipalsByOrganization",
		Method:             "GET",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/user-principals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUserPrincipalsByOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserPrincipalsByOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUserPrincipalsByOrganizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Ping pings pings the healthcheck endpoint exposed for HTTP healthchecks via datadog synthetic monitoring
*/
func (a *Client) Ping(params *PingParams, opts ...ClientOption) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ping",
		Method:             "GET",
		PathPattern:        "/iam/2019-12-10/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchPrincipals searches principals returns principal details for principals within the supplied organization optional filters may be specified to filter the result set
*/
func (a *Client) SearchPrincipals(params *SearchPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPrincipalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPrincipalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchPrincipals",
		Method:             "POST",
		PathPattern:        "/iam/2019-12-10/organizations/{organization_id}/principals/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchPrincipalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPrincipalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchPrincipalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateWebConsolePreferences updates web console preferences updates a user principal s web portal fka web console preferences
*/
func (a *Client) UpdateWebConsolePreferences(params *UpdateWebConsolePreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebConsolePreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebConsolePreferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateWebConsolePreferences",
		Method:             "PUT",
		PathPattern:        "/iam/2019-12-10/me/web-portal-preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateWebConsolePreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWebConsolePreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateWebConsolePreferencesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
