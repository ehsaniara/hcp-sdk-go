// Code generated by go-swagger; DO NOT EDIT.

package s_s_o_management_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/hashicorp/hcp-sdk-go/clients/cloud-iam/stable/2019-12-10/models"
)

// NewUpdateSSOConfigurationParams creates a new UpdateSSOConfigurationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateSSOConfigurationParams() *UpdateSSOConfigurationParams {
	return &UpdateSSOConfigurationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSSOConfigurationParamsWithTimeout creates a new UpdateSSOConfigurationParams object
// with the ability to set a timeout on a request.
func NewUpdateSSOConfigurationParamsWithTimeout(timeout time.Duration) *UpdateSSOConfigurationParams {
	return &UpdateSSOConfigurationParams{
		timeout: timeout,
	}
}

// NewUpdateSSOConfigurationParamsWithContext creates a new UpdateSSOConfigurationParams object
// with the ability to set a context for a request.
func NewUpdateSSOConfigurationParamsWithContext(ctx context.Context) *UpdateSSOConfigurationParams {
	return &UpdateSSOConfigurationParams{
		Context: ctx,
	}
}

// NewUpdateSSOConfigurationParamsWithHTTPClient creates a new UpdateSSOConfigurationParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateSSOConfigurationParamsWithHTTPClient(client *http.Client) *UpdateSSOConfigurationParams {
	return &UpdateSSOConfigurationParams{
		HTTPClient: client,
	}
}

/*
UpdateSSOConfigurationParams contains all the parameters to send to the API endpoint

	for the update s s o configuration operation.

	Typically these are written to a http.Request.
*/
type UpdateSSOConfigurationParams struct {

	// Body.
	Body *models.HashicorpCloudIamUpdateSSOConfigurationRequest

	/* OrganizationID.

	   OrganizationId is the identifier of the organization.
	*/
	OrganizationID string

	/* Type.

	     type is the type of Single Sign-On we are updating. This is only used for
	the RESTFul Gateway parameter. It must match the type in the config
	field. This is used due to a bug in the grpc-gateway generator that
	erases the field value if a field is used as a parameter. So we need to
	use this one instead of config.type.
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update s s o configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateSSOConfigurationParams) WithDefaults() *UpdateSSOConfigurationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update s s o configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateSSOConfigurationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) WithTimeout(timeout time.Duration) *UpdateSSOConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) WithContext(ctx context.Context) *UpdateSSOConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) WithHTTPClient(client *http.Client) *UpdateSSOConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) WithBody(body *models.HashicorpCloudIamUpdateSSOConfigurationRequest) *UpdateSSOConfigurationParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) SetBody(body *models.HashicorpCloudIamUpdateSSOConfigurationRequest) {
	o.Body = body
}

// WithOrganizationID adds the organizationID to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) WithOrganizationID(organizationID string) *UpdateSSOConfigurationParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithType adds the typeVar to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) WithType(typeVar string) *UpdateSSOConfigurationParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the update s s o configuration params
func (o *UpdateSSOConfigurationParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSSOConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param organization_id
	if err := r.SetPathParam("organization_id", o.OrganizationID); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
