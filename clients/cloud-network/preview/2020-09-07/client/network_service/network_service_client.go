// Code generated by go-swagger; DO NOT EDIT.

package network_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new network service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZone(params *NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZoneParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZoneOK, error)

	NetworkServiceCreate(params *NetworkServiceCreateParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceCreateOK, error)

	NetworkServiceCreatePeering(params *NetworkServiceCreatePeeringParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceCreatePeeringOK, error)

	NetworkServiceCreateTGWAttachment(params *NetworkServiceCreateTGWAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceCreateTGWAttachmentOK, error)

	NetworkServiceDelete(params *NetworkServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceDeleteOK, error)

	NetworkServiceDeletePeering(params *NetworkServiceDeletePeeringParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceDeletePeeringOK, error)

	NetworkServiceDeleteTGWAttachment(params *NetworkServiceDeleteTGWAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceDeleteTGWAttachmentOK, error)

	NetworkServiceGet(params *NetworkServiceGetParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceGetOK, error)

	NetworkServiceGetPeering(params *NetworkServiceGetPeeringParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceGetPeeringOK, error)

	NetworkServiceGetTGWAttachment(params *NetworkServiceGetTGWAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceGetTGWAttachmentOK, error)

	NetworkServiceList(params *NetworkServiceListParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceListOK, error)

	NetworkServiceListDependencies(params *NetworkServiceListDependenciesParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceListDependenciesOK, error)

	NetworkServiceListPeerings(params *NetworkServiceListPeeringsParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceListPeeringsOK, error)

	NetworkServiceListTGWAttachments(params *NetworkServiceListTGWAttachmentsParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceListTGWAttachmentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZone associates h v n with a w s route53 private hosted zone will associate the h v n s v p c with a user s private hosted zone in a w s route53 this will enable the resolution of records of the private hosted zone from within the v p c
*/
func (a *Client) NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZone(params *NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZoneParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_AssociateHVNWithAWSRoute53PrivateHostedZone",
		Method:             "POST",
		PathPattern:        "/network/2020-09-07/organizations/{location.organization_id}/projects/{location.project_id}/networks/{hvn_id}/aws-route53-private-hosted-zone-associations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceAssociateHVNWithAWSRoute53PrivateHostedZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceCreate creates creates a new h v n
*/
func (a *Client) NetworkServiceCreate(params *NetworkServiceCreateParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_Create",
		Method:             "POST",
		PathPattern:        "/network/2020-09-07/organizations/{network.location.organization_id}/projects/{network.location.project_id}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceCreatePeering creates peering creates a new network peering between h v n v p c and target v p c
*/
func (a *Client) NetworkServiceCreatePeering(params *NetworkServiceCreatePeeringParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceCreatePeeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceCreatePeeringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_CreatePeering",
		Method:             "POST",
		PathPattern:        "/network/2020-09-07/organizations/{peering.hvn.location.organization_id}/projects/{peering.hvn.location.project_id}/networks/{peering.hvn.id}/peerings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceCreatePeeringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceCreatePeeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceCreatePeeringDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceCreateTGWAttachment creates t g w attachment creates a new transit gateway attachment for an h v n
*/
func (a *Client) NetworkServiceCreateTGWAttachment(params *NetworkServiceCreateTGWAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceCreateTGWAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceCreateTGWAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_CreateTGWAttachment",
		Method:             "POST",
		PathPattern:        "/network/2020-09-07/organizations/{hvn.location.organization_id}/projects/{hvn.location.project_id}/networks/{hvn.id}/transit-gateway-attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceCreateTGWAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceCreateTGWAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceCreateTGWAttachmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceDelete deletes deletes a new h v n
*/
func (a *Client) NetworkServiceDelete(params *NetworkServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_Delete",
		Method:             "DELETE",
		PathPattern:        "/network/2020-09-07/organizations/{location.organization_id}/projects/{location.project_id}/networks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceDeletePeering deletes peering deletes specified peering and triggers updating network configuration
*/
func (a *Client) NetworkServiceDeletePeering(params *NetworkServiceDeletePeeringParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceDeletePeeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceDeletePeeringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_DeletePeering",
		Method:             "DELETE",
		PathPattern:        "/network/2020-09-07/organizations/{location.organization_id}/projects/{location.project_id}/networks/{hvn_id}/peerings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceDeletePeeringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceDeletePeeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceDeletePeeringDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceDeleteTGWAttachment deletes t g w attachment deletes specified transit gateway attachment and triggers updating network configuration
*/
func (a *Client) NetworkServiceDeleteTGWAttachment(params *NetworkServiceDeleteTGWAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceDeleteTGWAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceDeleteTGWAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_DeleteTGWAttachment",
		Method:             "DELETE",
		PathPattern:        "/network/2020-09-07/organizations/{hvn.location.organization_id}/projects/{hvn.location.project_id}/networks/{hvn.id}/transit-gateway-attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceDeleteTGWAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceDeleteTGWAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceDeleteTGWAttachmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceGet gets reads a single h v n
*/
func (a *Client) NetworkServiceGet(params *NetworkServiceGetParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_Get",
		Method:             "GET",
		PathPattern:        "/network/2020-09-07/organizations/{location.organization_id}/projects/{location.project_id}/networks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceGetPeering gets peering returns information about peering
*/
func (a *Client) NetworkServiceGetPeering(params *NetworkServiceGetPeeringParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceGetPeeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceGetPeeringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_GetPeering",
		Method:             "GET",
		PathPattern:        "/network/2020-09-07/organizations/{location.organization_id}/projects/{location.project_id}/networks/{hvn_id}/peerings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceGetPeeringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceGetPeeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceGetPeeringDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceGetTGWAttachment gets t g w attachment returns existing t g w attachment
*/
func (a *Client) NetworkServiceGetTGWAttachment(params *NetworkServiceGetTGWAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceGetTGWAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceGetTGWAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_GetTGWAttachment",
		Method:             "GET",
		PathPattern:        "/network/2020-09-07/organizations/{hvn.location.organization_id}/projects/{hvn.location.project_id}/networks/{hvn.id}/transit-gateway-attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceGetTGWAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceGetTGWAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceGetTGWAttachmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceList lists lists all h v ns
*/
func (a *Client) NetworkServiceList(params *NetworkServiceListParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_List",
		Method:             "GET",
		PathPattern:        "/network/2020-09-07/organizations/{location.organization_id}/projects/{location.project_id}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceListDependencies lists dependencies lists the dependent services on the given h v n
*/
func (a *Client) NetworkServiceListDependencies(params *NetworkServiceListDependenciesParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceListDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceListDependenciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_ListDependencies",
		Method:             "GET",
		PathPattern:        "/network/2020-09-07/organizations/{location.organization_id}/projects/{location.project_id}/networks/{id}/dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceListDependenciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceListDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceListDependenciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceListPeerings lists peerings returns a list of peerings matching the request
*/
func (a *Client) NetworkServiceListPeerings(params *NetworkServiceListPeeringsParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceListPeeringsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceListPeeringsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_ListPeerings",
		Method:             "GET",
		PathPattern:        "/network/2020-09-07/organizations/{location.organization_id}/projects/{location.project_id}/networks/{hvn_id}/peerings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceListPeeringsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceListPeeringsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceListPeeringsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkServiceListTGWAttachments lists t g w attachments returns a list of t g w attachments matching the request
*/
func (a *Client) NetworkServiceListTGWAttachments(params *NetworkServiceListTGWAttachmentsParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkServiceListTGWAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkServiceListTGWAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkService_ListTGWAttachments",
		Method:             "GET",
		PathPattern:        "/network/2020-09-07/organizations/{hvn.location.organization_id}/projects/{hvn.location.project_id}/networks/{hvn.id}/transit-gateway-attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkServiceListTGWAttachmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkServiceListTGWAttachmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkServiceListTGWAttachmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
