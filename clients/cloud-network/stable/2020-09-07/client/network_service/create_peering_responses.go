// Code generated by go-swagger; DO NOT EDIT.

package network_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/hashicorp/hcp-sdk-go/clients/cloud-network/stable/2020-09-07/models"
	cloud "github.com/hashicorp/hcp-sdk-go/clients/cloud-shared/v1/models"
)

// CreatePeeringReader is a Reader for the CreatePeering structure.
type CreatePeeringReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePeeringReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreatePeeringOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreatePeeringDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreatePeeringOK creates a CreatePeeringOK with default headers values
func NewCreatePeeringOK() *CreatePeeringOK {
	return &CreatePeeringOK{}
}

/*
CreatePeeringOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreatePeeringOK struct {
	Payload *models.HashicorpCloudNetwork20200907CreatePeeringResponse
}

// IsSuccess returns true when this create peering o k response has a 2xx status code
func (o *CreatePeeringOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create peering o k response has a 3xx status code
func (o *CreatePeeringOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create peering o k response has a 4xx status code
func (o *CreatePeeringOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create peering o k response has a 5xx status code
func (o *CreatePeeringOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create peering o k response a status code equal to that given
func (o *CreatePeeringOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create peering o k response
func (o *CreatePeeringOK) Code() int {
	return 200
}

func (o *CreatePeeringOK) Error() string {
	return fmt.Sprintf("[POST /network/2020-09-07/organizations/{peering.hvn.location.organization_id}/projects/{peering.hvn.location.project_id}/networks/{peering.hvn.id}/peerings][%d] createPeeringOK  %+v", 200, o.Payload)
}

func (o *CreatePeeringOK) String() string {
	return fmt.Sprintf("[POST /network/2020-09-07/organizations/{peering.hvn.location.organization_id}/projects/{peering.hvn.location.project_id}/networks/{peering.hvn.id}/peerings][%d] createPeeringOK  %+v", 200, o.Payload)
}

func (o *CreatePeeringOK) GetPayload() *models.HashicorpCloudNetwork20200907CreatePeeringResponse {
	return o.Payload
}

func (o *CreatePeeringOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HashicorpCloudNetwork20200907CreatePeeringResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePeeringDefault creates a CreatePeeringDefault with default headers values
func NewCreatePeeringDefault(code int) *CreatePeeringDefault {
	return &CreatePeeringDefault{
		_statusCode: code,
	}
}

/*
CreatePeeringDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type CreatePeeringDefault struct {
	_statusCode int

	Payload *cloud.GoogleRPCStatus
}

// IsSuccess returns true when this create peering default response has a 2xx status code
func (o *CreatePeeringDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create peering default response has a 3xx status code
func (o *CreatePeeringDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create peering default response has a 4xx status code
func (o *CreatePeeringDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create peering default response has a 5xx status code
func (o *CreatePeeringDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create peering default response a status code equal to that given
func (o *CreatePeeringDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create peering default response
func (o *CreatePeeringDefault) Code() int {
	return o._statusCode
}

func (o *CreatePeeringDefault) Error() string {
	return fmt.Sprintf("[POST /network/2020-09-07/organizations/{peering.hvn.location.organization_id}/projects/{peering.hvn.location.project_id}/networks/{peering.hvn.id}/peerings][%d] CreatePeering default  %+v", o._statusCode, o.Payload)
}

func (o *CreatePeeringDefault) String() string {
	return fmt.Sprintf("[POST /network/2020-09-07/organizations/{peering.hvn.location.organization_id}/projects/{peering.hvn.location.project_id}/networks/{peering.hvn.id}/peerings][%d] CreatePeering default  %+v", o._statusCode, o.Payload)
}

func (o *CreatePeeringDefault) GetPayload() *cloud.GoogleRPCStatus {
	return o.Payload
}

func (o *CreatePeeringDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(cloud.GoogleRPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreatePeeringBody CreatePeeringRequest is a request type for CreatePeering endpoint
swagger:model CreatePeeringBody
*/
type CreatePeeringBody struct {

	// peering
	Peering *CreatePeeringParamsBodyPeering `json:"peering,omitempty"`
}

// Validate validates this create peering body
func (o *CreatePeeringBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePeering(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePeeringBody) validatePeering(formats strfmt.Registry) error {
	if swag.IsZero(o.Peering) { // not required
		return nil
	}

	if o.Peering != nil {
		if err := o.Peering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create peering body based on the context it is used
func (o *CreatePeeringBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePeering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePeeringBody) contextValidatePeering(ctx context.Context, formats strfmt.Registry) error {

	if o.Peering != nil {

		if swag.IsZero(o.Peering) { // not required
			return nil
		}

		if err := o.Peering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePeeringBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePeeringBody) UnmarshalBinary(b []byte) error {
	var res CreatePeeringBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePeeringParamsBodyPeering peering is the peering to be created.
//
// peering is the peering to be created.
swagger:model CreatePeeringParamsBodyPeering
*/
type CreatePeeringParamsBodyPeering struct {

	// CreatedAt is a timestamp when peering was originally created
	//
	// Output only.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// ExpiresAt is the timestamp after which peering will be considered
	// Expired if it doesn't transition into Accepted or Active state before that
	//
	// Output only.
	// Read Only: true
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expires_at,omitempty"`

	// hvn
	Hvn *CreatePeeringParamsBodyPeeringHvn `json:"hvn,omitempty"`

	// Id is the id of a peering.
	ID string `json:"id,omitempty"`

	// ProviderPeeringId is the id of this peering in the cloud provider
	//
	// Output only.
	// Read Only: true
	ProviderPeeringID string `json:"provider_peering_id,omitempty"`

	// SourceChannel is a string representing the issuer of the peering request
	//
	// Output only.
	// Read Only: true
	SourceChannel string `json:"source_channel,omitempty"`

	// State is the state of a peering
	//
	// Output only.
	// Read Only: true
	State *models.HashicorpCloudNetwork20200907PeeringState `json:"state,omitempty"`

	// Target is a provider specific details about peering target
	Target *models.HashicorpCloudNetwork20200907PeeringTarget `json:"target,omitempty"`

	// UpdatedAt is a timestamp when peering was originally created
	//
	// Output only.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this create peering params body peering
func (o *CreatePeeringParamsBodyPeering) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHvn(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePeeringParamsBodyPeering) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"peering"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"peering"+"."+"expires_at", "body", "date-time", o.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) validateHvn(formats strfmt.Registry) error {
	if swag.IsZero(o.Hvn) { // not required
		return nil
	}

	if o.Hvn != nil {
		if err := o.Hvn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "hvn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "hvn")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	if o.State != nil {
		if err := o.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "target")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"peering"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create peering params body peering based on the context it is used
func (o *CreatePeeringParamsBodyPeering) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpiresAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHvn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProviderPeeringID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSourceChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePeeringParamsBodyPeering) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"peering"+"."+"created_at", "body", strfmt.DateTime(o.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) contextValidateExpiresAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"peering"+"."+"expires_at", "body", strfmt.DateTime(o.ExpiresAt)); err != nil {
		return err
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) contextValidateHvn(ctx context.Context, formats strfmt.Registry) error {

	if o.Hvn != nil {

		if swag.IsZero(o.Hvn) { // not required
			return nil
		}

		if err := o.Hvn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "hvn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "hvn")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) contextValidateProviderPeeringID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"peering"+"."+"provider_peering_id", "body", string(o.ProviderPeeringID)); err != nil {
		return err
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) contextValidateSourceChannel(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"peering"+"."+"source_channel", "body", string(o.SourceChannel)); err != nil {
		return err
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if o.State != nil {

		if swag.IsZero(o.State) { // not required
			return nil
		}

		if err := o.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if o.Target != nil {

		if swag.IsZero(o.Target) { // not required
			return nil
		}

		if err := o.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "target")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePeeringParamsBodyPeering) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"peering"+"."+"updated_at", "body", strfmt.DateTime(o.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePeeringParamsBodyPeering) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePeeringParamsBodyPeering) UnmarshalBinary(b []byte) error {
	var res CreatePeeringParamsBodyPeering
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePeeringParamsBodyPeeringHvn Hvn is the a link to the HVN where peering belongs to.
//
// Hvn is the a link to the HVN where peering belongs to.
swagger:model CreatePeeringParamsBodyPeeringHvn
*/
type CreatePeeringParamsBodyPeeringHvn struct {

	// description is a human-friendly description for this link. This is
	// used primarily for informational purposes such as error messages.
	Description string `json:"description,omitempty"`

	// location
	Location *CreatePeeringParamsBodyPeeringHvnLocation `json:"location,omitempty"`

	// type is the unique type of the resource. Each service publishes a
	// unique set of types. The type value is recommended to be formatted
	// in "<org>.<type>" such as "hashicorp.hvn". This is to prevent conflicts
	// in the future, but any string value will work.
	Type string `json:"type,omitempty"`

	// uuid is the unique UUID for this resource.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this create peering params body peering hvn
func (o *CreatePeeringParamsBodyPeeringHvn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePeeringParamsBodyPeeringHvn) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(o.Location) { // not required
		return nil
	}

	if o.Location != nil {
		if err := o.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "hvn" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "hvn" + "." + "location")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create peering params body peering hvn based on the context it is used
func (o *CreatePeeringParamsBodyPeeringHvn) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePeeringParamsBodyPeeringHvn) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if o.Location != nil {

		if swag.IsZero(o.Location) { // not required
			return nil
		}

		if err := o.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "hvn" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "hvn" + "." + "location")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePeeringParamsBodyPeeringHvn) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePeeringParamsBodyPeeringHvn) UnmarshalBinary(b []byte) error {
	var res CreatePeeringParamsBodyPeeringHvn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePeeringParamsBodyPeeringHvnLocation location is the location where this resource is.
//
// location is the location where this resource is.
swagger:model CreatePeeringParamsBodyPeeringHvnLocation
*/
type CreatePeeringParamsBodyPeeringHvnLocation struct {

	// region is the region that the resource is located in. It is
	// optional if the object being referenced is a global object.
	Region *cloud.HashicorpCloudLocationRegion `json:"region,omitempty"`
}

// Validate validates this create peering params body peering hvn location
func (o *CreatePeeringParamsBodyPeeringHvnLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePeeringParamsBodyPeeringHvnLocation) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "hvn" + "." + "location" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "hvn" + "." + "location" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create peering params body peering hvn location based on the context it is used
func (o *CreatePeeringParamsBodyPeeringHvnLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePeeringParamsBodyPeeringHvnLocation) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if swag.IsZero(o.Region) { // not required
			return nil
		}

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "peering" + "." + "hvn" + "." + "location" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "peering" + "." + "hvn" + "." + "location" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePeeringParamsBodyPeeringHvnLocation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePeeringParamsBodyPeeringHvnLocation) UnmarshalBinary(b []byte) error {
	var res CreatePeeringParamsBodyPeeringHvnLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
